import Head from 'next/head'
import { Inter } from '@next/font/google'
import styles from '../styles/Home.module.css'
import { Children, useEffect, useState } from 'react';
import Link from 'next/link';
import { app, database } from '../firebaseConfig';
import { collection, addDoc, getDocs } from 'firebase/firestore';

export default function Home({ data }) {
  const letters = ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', 'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'z', 'x', 'c', 'v', 'b', 'n', 'm', '-'];
  const [pokemon, setPokemon] = useState();
  const [textBlocks, setTextBlocks] = useState();
  const [correctLetters, setCorrectLetters] = useState();
  const [lives, setLives] = useState(5);
  const [heart, setHeart] = useState();
  const [score, setScore] = useState(0);
  const [highscores, setHighscores] = useState();
  const [highscoresModal, setHighscoresModal] = useState(false);
  const [name, setName] = useState('');

  const dbInstance = collection(database, 'highscores');

  const handleKeyPress = (e, pokemon) => {
      const value = e.target.textContent;
      e.target.disabled = true;

      const string = pokemon;

      if (string.includes(value)) {
        updateBlocks(string, value);
        e.target.classList.add("correct");
      } else {
        e.target.classList.add("wrong");
        setLives(lives - 1);
        
      }
  }

  useEffect(() => {
    setPokemon(data)
    createBlock(data.name);
    const buttons = document.querySelectorAll('.letter');
    buttons.forEach(button => {
      button.disabled = false;
    })
    setLives(5);
    createHeart(lives);
    setScore(0);
  }, [data])

  useEffect(() => {
    createHeart(lives);
  }, [lives])

  const createHeart = (lives) => {
    let divs = [];
    for (let i = 0; i < lives; i++) {
      divs.push(<img src='/heart-icon.png'/>);
    }
    setHeart(divs);
  }
  
  const createBlock = (string) => {
    let divs = [];
    let blank = [];
    for (let i = 0; i < string.length; i++) {
      divs.push(<div className={styles.key} key={i}></div>);
      blank.push('');
    }
    setTextBlocks(divs);
    setCorrectLetters(blank);
  }

  const updateBlocks = (string, letter) => {
    let div = [];
    let correct = 0;

    for (let i = 0; i < string.length; i++) {
      if (letter === string[i]) {
        correctLetters[i] = letter;
        div.push(<div className={styles.key} key={i}>{ correctLetters[i] }</div>)
      }
      else {
        div.push(<div className={styles.key} key={i}>{ correctLetters[i] }</div>);
        if (correctLetters[i] == ' ') {
          correctLetters[i] = ' ';
        }
      }

      string[i] === correctLetters[i] ? correct++ : '';
      
    }

    correct == string.length ? correctGuess(string) : '';
   
    setTextBlocks(div);
  }

  const correctGuess = async (string) => {
    let rand = Math.floor(Math.random() * 900) + 1;
    const res = await fetch(`https://pokeapi.co/api/v2/pokemon/${rand}`)
    const data = await res.json()
    
    const buttons = document.querySelectorAll('.letter');
    buttons.forEach(button => {
      button.disabled = false;
    })

    switch(lives) {
      case 5: setScore(score + (50 * string.length)); break;
      case 4: setScore(score + (40 * string.length)); break;
      case 3: setScore(score + (30 * string.length)); break;
      case 2: setScore(score + (20 * string.length)); break;
      case 1: setScore(score + (10 * string.length)); break;
    }
    
    if (!data) {
      return {
        notFound: true,
      }
    }

    setPokemon(data);
    createBlock(data.name);
    
  }

  const getHighscores = async () => {
    setHighscores([]);
    let highscoresTemp = [];
    await getDocs(dbInstance, { field: 'score', direction: 'desc' })
      .then((data) => {
        data.docs.map((item, index) => {
          highscoresTemp.push({ ...item.data(), id: item.id, key: index })
      })
    })

    setHighscores(highscoresTemp);

    setHighscoresModal(true);
  }

  const saveHighscore = () => {
    addDoc(dbInstance, {
        name: name,
        score: score
    })
        .then(() => {
            setName('')
        })
  }

  return (
    <>
      <Head>
        <title>Pokeguess</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={ styles.main }>
        <div className={styles.user}>
          <button onClick={getHighscores}>Highscores</button>
          <h4>Score: { score }</h4>
          <div className={styles.lives}>
            { heart }

          </div>
        </div>
        {pokemon && (
          <div className={styles.pokemon}>
            <img className={ styles.guess } src={ pokemon.sprites.other.home.front_default }/>
            <div className={styles.types}>
              { pokemon.types.map((type, index) => (
                <div className={styles.type} key={index}>
                <h6>{type.type.name}</h6>
                <img  src={`/${type.type.name}.png`}  />
                </div>
              )) }
            </div>
            <div className={ styles.blocks }>
              { textBlocks }
            </div>
           
          </div>
          
          )}

        
        <div className={ styles.keyboard } >
          {letters.map((letter, index) => (
            <button key={index} className={`letter ${styles.key}`} onClick={(e) => handleKeyPress(e, pokemon.name)}>
              { letter }
            </button>

          ))}
        </div>
         { lives === 0 && (
          <div className={styles.gameover}>
            <h1>Game Over</h1>
            <h3>Score: {score}</h3>

            <div className={styles.inputWrapper}>
              <input type="text" name="name" id="name" value={name} onChange={(e) => setName(e.target.value) }/>
              <button onClick={saveHighscore} >Save</button>
            </div>

            <Link href='/' >Retry</Link>
          </div>
        )}
        { highscoresModal && (
          <div className={styles.modal}>
            <div className={styles.modalHeader}>
              <h1>Highscores</h1>
              <button onClick={() => setHighscoresModal(false)}>X</button>
            </div>
            <div className={styles.highscores}>
              { highscores && (
                highscores.map((highscore, index) => (
                  <div className={styles.row} key={index}>
                    <div className={styles.column}><span>{ index + 1}</span>{highscore.name}</div>
                    <div className={styles.column}>{highscore.score}</div>
                  </div>
                  
                ))
              )}
            </div>
          </div>
        )}

      </main>
     
    </>
  )
}

export async function getServerSideProps(context) {
  let rand = Math.floor(Math.random() * 900) + 1;
  const res = await fetch(`https://pokeapi.co/api/v2/pokemon/${rand}`)
  const data = await res.json()

  if (!data) {
    return {
      notFound: true,
    }
  }

  return {
    props: { data }, // will be passed to the page component as props
  }
}